---
- name: Get list of jobs
  uri:
    user: admin
    password: admin
    force_basic_auth: yes
    url: "http://127.0.0.1:8080/api/json?tree=jobs[name]"
    return_content: yes
  register: jenkins_jobs
  until: jenkins_jobs.content.find('Please wait while Jenkins is getting ready to work') == -1
  retries: 10
  delay: 5

- name: Check if seed job exists
  set_fact:
    jenkins_seed_job_exists: "{{ jenkins_seed_name in (jenkins_jobs.content|from_json).jobs|map(attribute='name')|list }}"

- name: Create seed job
  uri:
    user: admin
    password: admin
    force_basic_auth: yes
    url: "http://127.0.0.1:8080/createItem?name={{ jenkins_seed_name }}"
    method: POST
    HEADER_Content-Type: application/xml
    body: "{{ lookup('template', jenkins_seed_template) }}"
  register: jenkins_seed_job_updated
  when: not jenkins_seed_job_exists

- name: Update seed job
  uri:
    user: admin
    password: admin
    force_basic_auth: yes
    url: "http://127.0.0.1:8080/job/{{ jenkins_seed_name }}/config.xml"
    method: POST
    HEADER_Content-Type: application/xml
    body: "{{ lookup('template', jenkins_seed_template) }}"
  register: jenkins_seed_job_updated
  when: jenkins_seed_job_exists

- name: Run seed job
  uri:
    user: admin
    password: admin
    force_basic_auth: yes
    url: "http://127.0.0.1:8080/job/{{ jenkins_seed_name }}/build"
    method: POST
    status_code: 201
  when: jenkins_seed_job_updated|success


- name: Check if seed job exists
  set_fact:
    jenkins_post_seed_job_exists: "{{ jenkins_post_seed_name in (jenkins_jobs.content|from_json).jobs|map(attribute='name')|list }}"
    until: jenkins_post_seed_job_exists == true


- name: Run your job
  uri:
    user: admin
    password: admin
    force_basic_auth: yes
    url: "http://127.0.0.1:8080/job/{{ jenkins_post_seed_name }}/build"
    method: POST
    status_code: 201
  when: jenkins_post_seed_job_exists


- name: Restart Jenkins if necessary
  service: name=jenkins state=restarted